#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
–°–æ–∑–¥–∞–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import random
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.engine import get_session, create_tables
from database.models import TimeEntry, ActivityCategory

# –ü—Ä–æ—Å—Ç—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
ACTIVITIES_WITH_CATEGORIES = {
    "work": ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í—Å—Ç—Ä–µ—á–∏", "–û—Ç–ª–∞–¥–∫–∞", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"],
    "study": ["–ò–∑—É—á–µ–Ω–∏–µ", "–ß—Ç–µ–Ω–∏–µ"],
    "rest": ["–û—Ç–¥—ã—Ö", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"]
}

def quick_generate(days=7, user_id=123456789):
    """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    
    print(f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ {days} –¥–Ω–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()
    
    session = get_session()
    
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        session.query(TimeEntry).delete()
        session.commit()
        print("üóëÔ∏è  –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        entries_created = 0
        start_date = datetime.now() - timedelta(days=days)
        
        current_date = start_date
        while current_date <= datetime.now():
            
            # 1-3 –∑–∞–ø–∏—Å–∏ –≤ –¥–µ–Ω—å
            daily_entries = random.randint(1, 3)
            
            for i in range(daily_entries):
                # –í—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
                hour = random.randint(9, 21)
                minute = random.randint(0, 59)
                
                entry_time = current_date.replace(
                    hour=hour, 
                    minute=minute, 
                    second=random.randint(0, 59)
                )
                
                # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                category = random.choice(['work', 'study', 'rest'])
                activity = random.choice(ACTIVITIES_WITH_CATEGORIES[category])
                
                # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 30-120 –º–∏–Ω—É—Ç
                duration = random.choice([30, 45, 60, 90, 120])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                category_enum = ActivityCategory(category)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                time_entry = TimeEntry(
                    user_id=user_id,
                    activity_name=activity,
                    category=category_enum,
                    duration_minutes=duration,
                    entry_date=entry_time
                )
                
                session.add(time_entry)
                entries_created += 1
            
            current_date += timedelta(days=1)
        
        session.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {entries_created} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = sum([entry.duration_minutes for entry in session.query(TimeEntry).all()])
        print(f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time//60}—á {total_time%60}–º–∏–Ω")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--days", type=int, default=7, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)")
    parser.add_argument("--user-id", type=int, default=123456789, help="Telegram User ID")
    
    args = parser.parse_args()
    
    quick_generate(args.days, args.user_id) 