#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""

import os
import sys
import random
from datetime import datetime, timedelta
from faker import Faker

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.engine import get_session, create_tables
from database.models import TimeEntry, ActivityCategory

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Faker –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
fake = Faker('ru_RU')

# –°–ø–∏—Å–æ–∫ —Ç–∏–ø–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
ACTIVITIES_WITH_CATEGORIES = {
    "work": [
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ö–æ–¥-—Ä–µ–≤—å—é",
        "–í—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π",
        "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
        "–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞",
        "–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤",
        "–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
        "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "–†–∞–±–æ—Ç–∞ —Å API",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
        "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞",
        "–†–∞–±–æ—Ç–∞ —Å Git"
    ],
    "study": [
        "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
        "–ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
        "–ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–∏—Ö –≤–∏–¥–µ–æ",
        "–ò–∑—É—á–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
        "–ò–∑—É—á–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"
    ],
    "rest": [
        "–§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
        "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥",
        "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
        "–ü—Ä–æ–≥—É–ª–∫–∏",
        "–•–æ–±–±–∏",
        "–û—Ç–¥—ã—Ö"
    ]
}

def generate_synthetic_data(days_back=30, user_id=123456789):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏
    
    Args:
        days_back (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    """
    
    print(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    create_tables()
    
    session = get_session()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        existing_count = session.query(TimeEntry).count()
        if existing_count > 0:
            print(f"‚ö†Ô∏è  –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {existing_count} –∑–∞–ø–∏—Å–µ–π")
            response = input("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏? (y/n): ")
            if response.lower() != 'y':
                print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        entries_created = 0
        start_date = datetime.now() - timedelta(days=days_back)
        
        current_date = start_date
        while current_date <= datetime.now():
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–µ–Ω—å (1-5)
            daily_entries = random.randint(1, 5)
            
            for _ in range(daily_entries):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
                hour = random.randint(6, 23)  # 6:00 - 23:00
                minute = random.randint(0, 59)
                
                entry_time = current_date.replace(
                    hour=hour, 
                    minute=minute, 
                    second=random.randint(0, 59)
                )
                
                # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –≤–µ—Å–∞–º–∏
                category = random.choices(
                    ['work', 'study', 'rest'],
                    weights=[0.5, 0.3, 0.2]  # –ë–æ–ª—å—à–µ —Ä–∞–±–æ—Ç—ã, –º–µ–Ω—å—à–µ –æ—Ç–¥—ã—Ö–∞
                )[0]
                
                # –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                activity = random.choice(ACTIVITIES_WITH_CATEGORIES[category])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (15-180 –º–∏–Ω—É—Ç)
                duration = random.choices(
                    [15, 30, 45, 60, 90, 120, 150, 180],
                    weights=[0.2, 0.25, 0.2, 0.15, 0.1, 0.05, 0.03, 0.02]
                )[0]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                category_enum = ActivityCategory(category)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                time_entry = TimeEntry(
                    user_id=user_id,
                    activity_name=activity,
                    category=category_enum,
                    duration_minutes=duration,
                    entry_date=entry_time
                )
                
                session.add(time_entry)
                entries_created += 1
            
            current_date += timedelta(days=1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        session.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {entries_created} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        show_statistics(session)
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        session.close()

def show_statistics(session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_entries = session.query(TimeEntry).count()
    total_time = session.query(TimeEntry).with_entities(
        func.sum(TimeEntry.duration_minutes)
    ).scalar() or 0
    
    print(f"   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}")
    print(f"   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time//60}—á {total_time%60}–º–∏–Ω")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
    activities = session.query(
        TimeEntry.activity_name,
        func.count(TimeEntry.id).label('count'),
        func.sum(TimeEntry.duration_minutes).label('total_time')
    ).group_by(TimeEntry.activity_name).order_by(
        func.sum(TimeEntry.duration_minutes).desc()
    ).limit(5).all()
    
    print(f"   üèÜ –¢–æ–ø-5 –∑–∞–¥–∞—á:")
    for activity, count, time in activities:
        hours = time // 60
        minutes = time % 60
        time_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes}–º–∏–Ω"
        print(f"      ‚Ä¢ {activity}: {time_str} ({count} –∑–∞–ø–∏—Å–µ–π)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    days_with_data = session.query(
        func.date(TimeEntry.entry_date)
    ).distinct().count()
    
    print(f"   üìÖ –î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {days_with_data}")

def clear_all_data():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"""
    
    print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    session = get_session()
    try:
        count = session.query(TimeEntry).count()
        session.query(TimeEntry).delete()
        session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Time Tracker")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    days_back = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
    days_back = int(days_back) if days_back.isdigit() else 30
    
    user_id = input("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 123456789): ").strip()
    user_id = int(user_id) if user_id.isdigit() else 123456789
    
    print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print(f"   üìÖ –î–Ω–µ–π –Ω–∞–∑–∞–¥: {days_back}")
    print(f"   üë§ User ID: {user_id}")
    
    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    print(f"\nüîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("2. –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("4. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
    
    if choice == "1":
        generate_synthetic_data(days_back, user_id)
    elif choice == "2":
        clear_all_data()
    elif choice == "3":
        session = get_session()
        show_statistics(session)
        session.close()
    elif choice == "4":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º func –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    from sqlalchemy import func
    main() 