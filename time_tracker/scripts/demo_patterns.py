#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞
"""

import os
import sys
import random
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.engine import get_session, create_tables
from database.models import TimeEntry, ActivityCategory

# –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
WORK_ACTIVITIES = [
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–ö–æ–¥-—Ä–µ–≤—å—é", 
    "–í—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π",
    "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
    "–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞",
    "–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤",
    "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–†–∞–±–æ—Ç–∞ —Å API"
]

LEARNING_ACTIVITIES = [
    "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
    "–ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–∏—Ö –≤–∏–¥–µ–æ",
    "–ò–∑—É—á–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
    "–ò–∑—É—á–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤",
    "–ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"
]

PERSONAL_ACTIVITIES = [
    "–§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
    "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥",
    "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
    "–ü—Ä–æ–≥—É–ª–∫–∏",
    "–•–æ–±–±–∏"
]

def create_demo_patterns(user_id=123456789):
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
    
    print("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏...")
    
    create_tables()
    session = get_session()
    
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        session.query(TimeEntry).delete()
        session.commit()
        
        entries_created = 0
        start_date = datetime.now() - timedelta(days=30)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –†–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç) - –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç—ã
        # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –í—ã—Ö–æ–¥–Ω—ã–µ - –±–æ–ª—å—à–µ –ª–∏—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã - –∏–∑—É—á–µ–Ω–∏–µ
        # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –î–Ω–µ–≤–Ω—ã–µ —á–∞—Å—ã - —Ä–∞–±–æ—Ç–∞
        # –ü–∞—Ç—Ç–µ—Ä–Ω 5: –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã - –ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è
        
        current_date = start_date
        while current_date <= datetime.now():
            
            day_of_week = current_date.weekday()  # 0=–ø–Ω, 6=–≤—Å
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            if day_of_week < 5:  # –†–∞–±–æ—á–∏–µ –¥–Ω–∏
                daily_entries = random.randint(3, 6)
            else:  # –í—ã—Ö–æ–¥–Ω—ã–µ
                daily_entries = random.randint(2, 4)
            
            for i in range(daily_entries):
                # –í—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if i == 0:  # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å - —É—Ç—Ä–æ (–∏–∑—É—á–µ–Ω–∏–µ)
                    hour = random.randint(7, 10)
                    activity = random.choice(LEARNING_ACTIVITIES)
                    duration = random.choice([30, 45, 60])
                elif i == 1 and day_of_week < 5:  # –í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å - —Ä–∞–±–æ—Ç–∞
                    hour = random.randint(10, 17)
                    activity = random.choice(WORK_ACTIVITIES)
                    duration = random.choice([60, 90, 120])
                else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ - —Å–º–µ—à–∞–Ω–Ω—ã–µ
                    hour = random.randint(14, 22)
                    if day_of_week < 5:  # –†–∞–±–æ—á–∏–µ –¥–Ω–∏
                        activity = random.choice(WORK_ACTIVITIES + LEARNING_ACTIVITIES)
                    else:  # –í—ã—Ö–æ–¥–Ω—ã–µ
                        activity = random.choice(LEARNING_ACTIVITIES + PERSONAL_ACTIVITIES)
                    duration = random.choice([30, 45, 60, 90])
                
                minute = random.randint(0, 59)
                entry_time = current_date.replace(
                    hour=hour, 
                    minute=minute, 
                    second=random.randint(0, 59)
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if activity in WORK_ACTIVITIES:
                    category = ActivityCategory.WORK
                elif activity in LEARNING_ACTIVITIES:
                    category = ActivityCategory.STUDY
                else:
                    category = ActivityCategory.REST
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                time_entry = TimeEntry(
                    user_id=user_id,
                    activity_name=activity,
                    category=category,
                    duration_minutes=duration,
                    entry_date=entry_time
                )
                
                session.add(time_entry)
                entries_created += 1
            
            current_date += timedelta(days=1)
        
        session.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {entries_created} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {datetime.now().strftime('%d.%m.%Y')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        show_demo_patterns(session)
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()

def show_demo_patterns(session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
    
    print("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_entries = session.query(TimeEntry).count()
    total_time = sum([entry.duration_minutes for entry in session.query(TimeEntry).all()])
    
    print(f"   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}")
    print(f"   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time//60}—á {total_time%60}–º–∏–Ω")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    work_time = sum([entry.duration_minutes for entry in session.query(TimeEntry).filter(
        TimeEntry.category == ActivityCategory.WORK
    ).all()])
    
    learning_time = sum([entry.duration_minutes for entry in session.query(TimeEntry).filter(
        TimeEntry.category == ActivityCategory.STUDY
    ).all()])
    
    personal_time = sum([entry.duration_minutes for entry in session.query(TimeEntry).filter(
        TimeEntry.category == ActivityCategory.REST
    ).all()])
    
    print(f"\nüè¢ –†–∞–±–æ—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {work_time//60}—á {work_time%60}–º–∏–Ω")
    print(f"üìö –ò–∑—É—á–µ–Ω–∏–µ: {learning_time//60}—á {learning_time%60}–º–∏–Ω")
    print(f"üë§ –õ–∏—á–Ω–æ–µ –≤—Ä–µ–º—è: {personal_time//60}—á {personal_time%60}–º–∏–Ω")
    
    # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    print(f"\nüèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:")
    activities = {}
    for entry in session.query(TimeEntry).all():
        activities[entry.activity_name] = activities.get(entry.activity_name, 0) + entry.duration_minutes
    
    sorted_activities = sorted(activities.items(), key=lambda x: x[1], reverse=True)[:5]
    for activity, time in sorted_activities:
        hours = time // 60
        minutes = time % 60
        time_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes}–º–∏–Ω"
        print(f"   ‚Ä¢ {activity}: {time_str}")

if __name__ == "__main__":
    create_demo_patterns() 