from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from .states import Form
from database.models import TimeEntry, ActivityCategory
from database.engine import get_session, close_session
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

router = Router()

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID'))

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_USER_ID

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìù /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üîî /remind - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        "‚ùå /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
        "üíº –†–∞–±–æ—Ç–∞ - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "üìö –£—á–µ–±–∞ - –∏–∑—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ\n"
        "üò¥ –û—Ç–¥—ã—Ö - –ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    )

def get_category_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞", callback_data="category_work"),
            InlineKeyboardButton(text="üìö –£—á–µ–±–∞", callback_data="category_study")
        ],
        [
            InlineKeyboardButton(text="üò¥ –û—Ç–¥—ã—Ö", callback_data="category_rest")
        ]
    ])
    return keyboard

@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await state.set_state(Form.waiting_for_category)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=get_category_keyboard()
    )

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    session = get_session()
    try:
        today = datetime.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_entries = session.query(TimeEntry).filter(
            TimeEntry.user_id == message.from_user.id,
            TimeEntry.entry_date >= today,
            TimeEntry.entry_date < today + timedelta(days=1)
        ).all()
        
        if not today_entries:
            await message.answer("üìä –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        total_time = 0
        
        for entry in today_entries:
            category = entry.category.value
            if category not in category_stats:
                category_stats[category] = {'time': 0, 'count': 0}
            category_stats[category]['time'] += entry.duration_minutes
            category_stats[category]['count'] += 1
            total_time += entry.duration_minutes
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):\n\n"
        stats_text += f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time//60}—á {total_time%60}–º–∏–Ω\n"
        stats_text += f"üìù –ó–∞–ø–∏—Å–µ–π: {len(today_entries)}\n\n"
        
        category_emoji = {
            'work': 'üíº',
            'study': 'üìö', 
            'rest': 'üò¥'
        }
        
        for category, stats in category_stats.items():
            emoji = category_emoji.get(category, 'üìä')
            time_str = f"{stats['time']//60}—á {stats['time']%60}–º–∏–Ω" if stats['time'] >= 60 else f"{stats['time']}–º–∏–Ω"
            stats_text += f"{emoji} {category.upper()}: {time_str} ({stats['count']} –∑–∞–ø–∏—Å–µ–π)\n"
        
        await message.answer(stats_text)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        print(f"Error getting stats: {e}")
    finally:
        close_session(session)

@router.message(Command("remind"))
async def cmd_remind(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remind - –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    await message.answer(
        "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:00\n"
        "–¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π."
    )

@router.callback_query(lambda c: c.data.startswith('category_'))
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        await state.clear()
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category_str = callback.data.split('_')[1]
    category_mapping = {
        'work': ActivityCategory.WORK,
        'study': ActivityCategory.STUDY,
        'rest': ActivityCategory.REST
    }
    
    category = category_mapping.get(category_str)
    if not category:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(category=category)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(Form.waiting_for_activity_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    examples = {
        ActivityCategory.WORK: "üíº –ü—Ä–∏–º–µ—Ä—ã: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –í—Å—Ç—Ä–µ—á–∏, –ö–æ–¥-—Ä–µ–≤—å—é, –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
        ActivityCategory.STUDY: "üìö –ü—Ä–∏–º–µ—Ä—ã: –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –ö—É—Ä—Å—ã, –ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
        ActivityCategory.REST: "üò¥ –ü—Ä–∏–º–µ—Ä—ã: –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥, –ú–µ–¥–∏—Ç–∞—Ü–∏—è, –•–æ–±–±–∏"
    }
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.value.upper()}\n\n"
        f"{examples[category]}\n\n"
        f"–ù–∞ –∫–∞–∫—É—é –∑–∞–¥–∞—á—É —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª(–∞) –≤—Ä–µ–º—è?"
    )

@router.message(Form.waiting_for_activity_name)
async def process_activity_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await state.update_data(activity_name=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(Form.waiting_for_duration)
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —ç—Ç–æ –∑–∞–Ω—è–ª–æ?")

@router.message(Form.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        await state.clear()
        return
    
    try:
        duration = int(message.text)
        if duration <= 0:
            await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    activity_name = data.get('activity_name')
    category = data.get('category')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    session = get_session()
    try:
        time_entry = TimeEntry(
            user_id=message.from_user.id,
            activity_name=activity_name,
            category=category,
            duration_minutes=duration
        )
        session.add(time_entry)
        session.commit()
        
        category_emoji = {
            ActivityCategory.WORK: "üíº",
            ActivityCategory.STUDY: "üìö",
            ActivityCategory.REST: "üò¥"
        }
        
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"{category_emoji[category]} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.value.upper()}\n"
            f"üìù –ó–∞–¥–∞—á–∞: {activity_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {duration} –º–∏–Ω—É—Ç"
        )
    except Exception as e:
        session.rollback()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
        print(f"Error saving time entry: {e}")
    finally:
        close_session(session)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear() 