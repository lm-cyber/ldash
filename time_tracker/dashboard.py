import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from database.engine import get_session, close_session
from database.models import TimeEntry
from datetime import datetime, timedelta
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–¢—Ä–µ–∫–µ—Ä –≤—Ä–µ–º–µ–Ω–∏",
    page_icon="‚è∞",
    layout="wide"
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
if 'last_refresh' not in st.session_state:
    st.session_state.last_refresh = datetime.now()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
if (datetime.now() - st.session_state.last_refresh).seconds > 30:
    st.cache_data.clear()
    st.session_state.last_refresh = datetime.now()

@st.cache_data(ttl=30)  # –ö—ç—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö"""
    session = get_session()
    try:
        entries = session.query(TimeEntry).all()
        data = []
        for entry in entries:
            data.append({
                'id': entry.id,
                'user_id': entry.user_id,
                'activity_name': entry.activity_name,
                'category': entry.category.value,
                'duration_minutes': entry.duration_minutes,
                'entry_date': entry.entry_date
            })
        df = pd.DataFrame(data)
        if not df.empty and 'entry_date' in df.columns:
            df['entry_date'] = pd.to_datetime(df['entry_date'])
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            df['date'] = df['entry_date'].dt.date
            df['hour'] = df['entry_date'].dt.hour
            df['day_of_week'] = df['entry_date'].dt.day_name()
            df['week'] = df['entry_date'].dt.isocalendar().week
            df['month'] = df['entry_date'].dt.month
            df['year'] = df['entry_date'].dt.year
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()
    finally:
        close_session(session)

def format_duration(minutes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    hours = minutes // 60
    mins = minutes % 60
    if hours > 0:
        return f"{hours}—á {mins}–º–∏–Ω"
    else:
        return f"{mins}–º–∏–Ω"

def show_general_statistics(df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_time = df['duration_minutes'].sum()
        time_str = format_duration(total_time)
        st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", time_str)
    
    with col2:
        st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(df))
    
    with col3:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á", df['activity_name'].nunique())
    
    with col4:
        avg_time = df['duration_minutes'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{avg_time:.1f} –º–∏–Ω")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        max_time = df['duration_minutes'].max()
        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è", format_duration(max_time))
    
    with col2:
        min_time = df['duration_minutes'].min()
        st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è", format_duration(min_time))
    
    with col3:
        total_days = df['date'].nunique()
        st.metric("–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", total_days)
    
    with col4:
        if total_days > 0:
            avg_daily = total_time / total_days
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å", format_duration(int(avg_daily)))
        else:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å", "0–º–∏–Ω")

def show_category_analysis(df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    st.header("üìÇ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_summary = df.groupby('category').agg({
        'duration_minutes': ['sum', 'count', 'mean', 'max', 'min'],
        'date': 'nunique'
    }).round(1)
    
    category_summary.columns = ['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–ú–∞–∫—Å –≤—Ä–µ–º—è (–º–∏–Ω)', '–ú–∏–Ω –≤—Ä–µ–º—è (–º–∏–Ω)', '–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']
    category_summary = category_summary.sort_values('–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', ascending=False)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    category_summary['–û–±—â–µ–µ –≤—Ä–µ–º—è'] = category_summary['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(format_duration)
    category_summary['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è'] = category_summary['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(lambda x: format_duration(int(x)))
    category_summary['–ú–∞–∫—Å –≤—Ä–µ–º—è'] = category_summary['–ú–∞–∫—Å –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(format_duration)
    category_summary['–ú–∏–Ω –≤—Ä–µ–º—è'] = category_summary['–ú–∏–Ω –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(format_duration)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_emoji = {
        'work': 'üíº',
        'study': 'üìö',
        'rest': 'üò¥'
    }
    
    category_summary['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = category_summary.index.map(lambda x: f"{category_emoji.get(x, 'üìä')} {x.upper()}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    display_cols = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–±—â–µ–µ –≤—Ä–µ–º—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', '–ú–∞–∫—Å –≤—Ä–µ–º—è', '–ú–∏–Ω –≤—Ä–µ–º—è', '–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']
    st.dataframe(category_summary[display_cols], use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìÇ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        if not category_summary.empty:
            fig_pie = px.pie(
                category_summary.reset_index(),
                values='–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)',
                names='category',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                color_discrete_map={
                    'work': '#FF6B6B',
                    'study': '#4ECDC4', 
                    'rest': '#45B7D1'
                }
            )
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")
    
    with col2:
        st.subheader("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        if not category_summary.empty:
            fig_bar = px.bar(
                category_summary.reset_index(),
                x='category',
                y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π',
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                color='category',
                color_discrete_map={
                    'work': '#FF6B6B',
                    'study': '#4ECDC4',
                    'rest': '#45B7D1'
                }
            )
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")
    
    # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
    st.subheader("‚öñÔ∏è –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–∏")
    
    if not category_summary.empty:
        total_time = category_summary['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'].sum()
        
        col1, col2, col3 = st.columns(3)
        
        for i, (category, row) in enumerate(category_summary.iterrows()):
            with [col1, col2, col3][i]:
                percentage = (row['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'] / total_time) * 100
                emoji = category_emoji.get(category, 'üìä')
                
                st.metric(
                    f"{emoji} {category.upper()}",
                    row['–û–±—â–µ–µ –≤—Ä–µ–º—è'],
                    f"{percentage:.1f}% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
                )

def show_activity_analysis(df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–¥–∞—á–∞–º"""
    st.header("üç∞ –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–¥–∞—á–∞–º")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
    activity_summary = df.groupby('activity_name').agg({
        'duration_minutes': ['sum', 'count', 'mean', 'max', 'min'],
        'date': 'nunique'
    }).round(1)
    
    activity_summary.columns = ['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–ú–∞–∫—Å –≤—Ä–µ–º—è (–º–∏–Ω)', '–ú–∏–Ω –≤—Ä–µ–º—è (–º–∏–Ω)', '–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']
    activity_summary = activity_summary.sort_values('–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', ascending=False)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    activity_summary['–û–±—â–µ–µ –≤—Ä–µ–º—è'] = activity_summary['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(format_duration)
    activity_summary['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è'] = activity_summary['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(lambda x: format_duration(int(x)))
    activity_summary['–ú–∞–∫—Å –≤—Ä–µ–º—è'] = activity_summary['–ú–∞–∫—Å –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(format_duration)
    activity_summary['–ú–∏–Ω –≤—Ä–µ–º—è'] = activity_summary['–ú–∏–Ω –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(format_duration)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º")
    display_cols = ['–û–±—â–µ–µ –≤—Ä–µ–º—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', '–ú–∞–∫—Å –≤—Ä–µ–º—è', '–ú–∏–Ω –≤—Ä–µ–º—è', '–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']
    st.dataframe(activity_summary[display_cols], use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üç∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏")
        if not activity_summary.empty:
            fig_pie = px.pie(
                activity_summary.reset_index(),
                values='–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)',
                names='activity_name',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∑–∞–¥–∞—á–∞–º"
            )
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")
    
    with col2:
        st.subheader("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–¥–∞—á–∞–º")
        if not activity_summary.empty:
            fig_bar = px.bar(
                activity_summary.reset_index(),
                x='activity_name',
                y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π',
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–¥–∞—á–∞–º"
            )
            fig_bar.update_xaxes(tickangle=45)
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")

def show_time_analysis(df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    st.header("‚è∞ –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        day_names_ru = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        
        daily_summary = df.groupby('day_of_week')['duration_minutes'].sum().reset_index()
        if not daily_summary.empty:
            daily_summary['day_of_week'] = pd.Categorical(daily_summary['day_of_week'], categories=day_order, ordered=True)
            daily_summary = daily_summary.sort_values('day_of_week')
            
            # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
            day_mapping = dict(zip(day_order, day_names_ru))
            daily_summary['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = daily_summary['day_of_week'].map(day_mapping)
            
            fig_day = px.bar(
                daily_summary,
                x='–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
                y='duration_minutes',
                title="–í—Ä–µ–º—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
                labels={'duration_minutes': '–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)'}
            )
            st.plotly_chart(fig_day, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    
    with col2:
        st.subheader("üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")
        hourly_summary = df.groupby('hour')['duration_minutes'].sum().reset_index()
        
        if not hourly_summary.empty:
            fig_hour = px.bar(
                hourly_summary,
                x='hour',
                y='duration_minutes',
                title="–í—Ä–µ–º—è –ø–æ —á–∞—Å–∞–º –¥–Ω—è",
                labels={'hour': '–ß–∞—Å', 'duration_minutes': '–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)'}
            )
            fig_hour.update_xaxes(tickmode='linear', tick0=0, dtick=1)
            st.plotly_chart(fig_hour, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —á–∞—Å–∞–º")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
    st.subheader("üìà –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
    
    daily_time = df.groupby('date')['duration_minutes'].sum().reset_index()
    daily_time['date'] = pd.to_datetime(daily_time['date'])
    daily_time = daily_time.sort_values('date')
    
    if not daily_time.empty:
        fig_daily = px.line(
            daily_time,
            x='date',
            y='duration_minutes',
            title="–¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º",
            labels={'duration_minutes': '–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', 'date': '–î–∞—Ç–∞'}
        )
        fig_daily.update_layout(xaxis_tickformat='%d.%m.%Y')
        st.plotly_chart(fig_daily, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –ø–æ –¥–Ω—è–º")
    
    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.subheader("üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ vs —á–∞—Å—ã
    df_pivot = df.groupby(['day_of_week', 'hour'])['duration_minutes'].sum().reset_index()
    
    if not df_pivot.empty:
        df_pivot['day_of_week'] = pd.Categorical(df_pivot['day_of_week'], categories=day_order, ordered=True)
        df_pivot = df_pivot.sort_values(['day_of_week', 'hour'])
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        heatmap_data = df_pivot.pivot(index='day_of_week', columns='hour', values='duration_minutes').fillna(0)
        heatmap_data.index = [day_mapping[day] for day in heatmap_data.index]
        
        fig_heatmap = px.imshow(
            heatmap_data,
            title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ √ó –ß–∞—Å—ã –¥–Ω—è",
            labels=dict(x="–ß–∞—Å –¥–Ω—è", y="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", color="–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)"),
            color_continuous_scale='viridis'
        )
        st.plotly_chart(fig_heatmap, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã")

def show_detailed_data(df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    st.header("üìã –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    col1, col2 = st.columns(2)
    
    with col1:
        sort_by = st.selectbox(
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ:",
            ['–î–∞—Ç–∞ (–Ω–æ–≤—ã–µ)', '–î–∞—Ç–∞ (—Å—Ç–∞—Ä—ã–µ)', '–í—Ä–µ–º—è (–±–æ–ª—å—à–µ)', '–í—Ä–µ–º—è (–º–µ–Ω—å—à–µ)', '–ó–∞–¥–∞—á–∞']
        )
    
    with col2:
        show_count = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:", 10, 100, 50)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    display_df = df.copy()
    if sort_by == '–î–∞—Ç–∞ (–Ω–æ–≤—ã–µ)':
        display_df = display_df.sort_values('entry_date', ascending=False)
    elif sort_by == '–î–∞—Ç–∞ (—Å—Ç–∞—Ä—ã–µ)':
        display_df = display_df.sort_values('entry_date', ascending=True)
    elif sort_by == '–í—Ä–µ–º—è (–±–æ–ª—å—à–µ)':
        display_df = display_df.sort_values('duration_minutes', ascending=False)
    elif sort_by == '–í—Ä–µ–º—è (–º–µ–Ω—å—à–µ)':
        display_df = display_df.sort_values('duration_minutes', ascending=True)
    elif sort_by == '–ó–∞–¥–∞—á–∞':
        display_df = display_df.sort_values('activity_name')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    display_df['entry_date'] = display_df['entry_date'].dt.strftime('%d.%m.%Y %H:%M')
    display_df['duration_formatted'] = display_df['duration_minutes'].apply(format_duration)
    display_df['day_of_week'] = display_df['day_of_week'].map({
        'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä', 'Thursday': '–ß—Ç',
        'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–í—Å'
    })
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    display_df = display_df.rename(columns={
        'id': 'ID',
        'activity_name': '–ó–∞–¥–∞—á–∞',
        'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        'duration_minutes': '–í—Ä–µ–º—è (–º–∏–Ω)',
        'duration_formatted': '–í—Ä–µ–º—è',
        'entry_date': '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
        'day_of_week': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
        'hour': '–ß–∞—Å'
    })
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    columns_to_show = ['ID', '–ó–∞–¥–∞—á–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–í—Ä–µ–º—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', '–ß–∞—Å']
    st.dataframe(display_df[columns_to_show].head(show_count), use_container_width=True)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    csv = display_df[columns_to_show].to_csv(index=False, encoding='utf-8-sig')
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å CSV",
        data=csv,
        file_name=f"time_tracker_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
        mime="text/csv"
    )

def show_time_by_categories(df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    st.header("üïê –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    if df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    df['hour_group'] = pd.cut(df['hour'], bins=[0, 6, 12, 18, 24], labels=['–ù–æ—á—å (0-6)', '–£—Ç—Ä–æ (6-12)', '–î–µ–Ω—å (12-18)', '–í–µ—á–µ—Ä (18-24)'])
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    st.subheader("‚è∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è")
    
    category_time_analysis = df.groupby(['category', 'hour_group'], observed=True).agg({
        'duration_minutes': ['sum', 'count', 'mean']
    }).round(1)
    
    category_time_analysis.columns = ['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)']
    category_time_analysis = category_time_analysis.reset_index()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
    pivot_data = category_time_analysis.pivot(index='category', columns='hour_group', values='–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)').fillna(0)
    
    fig_heatmap = px.imshow(
        pivot_data,
        title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è",
        color_continuous_scale='Viridis',
        aspect='auto'
    )
    fig_heatmap.update_layout(
        xaxis_title="–í—Ä–µ–º—è –¥–Ω—è",
        yaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    )
    st.plotly_chart(fig_heatmap, use_container_width=True)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_emoji = {
        'work': 'üíº',
        'study': 'üìö',
        'rest': 'üò¥'
    }
    
    category_time_analysis['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = category_time_analysis['category'].map(
        lambda x: f"{category_emoji.get(x, 'üìä')} {x.upper()}"
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    category_time_analysis['–û–±—â–µ–µ –≤—Ä–µ–º—è'] = category_time_analysis['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(format_duration)
    category_time_analysis['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è'] = category_time_analysis['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'].apply(
        lambda x: format_duration(int(x)) if pd.notna(x) else "0–º–∏–Ω"
    )
    
    display_cols = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'hour_group', '–û–±—â–µ–µ –≤—Ä–µ–º—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è']
    st.dataframe(category_time_analysis[display_cols], use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    st.subheader("üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    
    weekday_analysis = df.groupby(['category', 'day_of_week']).agg({
        'duration_minutes': ['sum', 'count']
    }).round(1)
    
    weekday_analysis.columns = ['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π']
    weekday_analysis = weekday_analysis.reset_index()
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig_weekday = px.bar(
        weekday_analysis,
        x='day_of_week',
        y='–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)',
        color='category',
        title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
        barmode='group',
        color_discrete_map={
            'work': '#FF6B6B',
            'study': '#4ECDC4',
            'rest': '#45B7D1'
        }
    )
    fig_weekday.update_layout(
        xaxis_title="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
        yaxis_title="–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)"
    )
    st.plotly_chart(fig_weekday, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    st.subheader("üïê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º –¥–Ω—è")
    
    hourly_analysis = df.groupby(['category', 'hour']).agg({
        'duration_minutes': ['sum', 'count']
    }).round(1)
    
    hourly_analysis.columns = ['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π']
    hourly_analysis = hourly_analysis.reset_index()
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig_hourly = px.line(
        hourly_analysis,
        x='hour',
        y='–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)',
        color='category',
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –¥–Ω—è",
        markers=True,
        color_discrete_map={
            'work': '#FF6B6B',
            'study': '#4ECDC4',
            'rest': '#45B7D1'
        }
    )
    fig_hourly.update_layout(
        xaxis_title="–ß–∞—Å –¥–Ω—è",
        yaxis_title="–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)",
        xaxis=dict(tickmode='linear', tick0=0, dtick=1)
    )
    st.plotly_chart(fig_hourly, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    st.subheader("üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    col1, col2, col3 = st.columns(3)
    
    for i, category in enumerate(['work', 'study', 'rest']):
        with [col1, col2, col3][i]:
            category_data = df[df['category'] == category]
            if not category_data.empty:
                total_time = category_data['duration_minutes'].sum()
                avg_time = category_data['duration_minutes'].mean()
                peak_hour = category_data.groupby('hour')['duration_minutes'].sum().idxmax()
                
                emoji = category_emoji.get(category, 'üìä')
                st.metric(
                    f"{emoji} {category.upper()}",
                    format_duration(total_time),
                    f"–ü–∏–∫: {peak_hour}:00"
                )
            else:
                emoji = category_emoji.get(category, 'üìä')
                st.metric(f"{emoji} {category.upper()}", "0–º–∏–Ω", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

def show_trends_analysis(df):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤"""
    st.header("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
    
    if df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
    daily_stats = df.groupby('date').agg({
        'duration_minutes': ['sum', 'count', 'mean']
    }).round(1)
    
    daily_stats.columns = ['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)']
    daily_stats = daily_stats.reset_index()
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –¥–Ω—è–º
    st.subheader("üìä –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ –¥–Ω—è–º")
    fig_time = px.line(
        daily_stats,
        x='date',
        y='–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)',
        title="–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –¥–Ω—è–º",
        markers=True
    )
    fig_time.update_layout(xaxis_title="–î–∞—Ç–∞", yaxis_title="–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)")
    st.plotly_chart(fig_time, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–Ω—è–º
    st.subheader("üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–Ω—è–º")
    fig_count = px.bar(
        daily_stats,
        x='date',
        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π',
        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–Ω—è–º"
    )
    fig_count.update_layout(xaxis_title="–î–∞—Ç–∞", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π")
    st.plotly_chart(fig_count, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
    
    if len(daily_stats) > 1:
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        time_trend = np.polyfit(range(len(daily_stats)), daily_stats['–û–±—â–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)'], 1)
        count_trend = np.polyfit(range(len(daily_stats)), daily_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'], 1)
        
        col1, col2 = st.columns(2)
        
        with col1:
            trend_direction = "üìà –†–∞—Å—Ç–µ—Ç" if time_trend[0] > 0 else "üìâ –ü–∞–¥–∞–µ—Ç" if time_trend[0] < 0 else "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ"
            st.metric(
                "–¢—Ä–µ–Ω–¥ –≤—Ä–µ–º–µ–Ω–∏",
                trend_direction,
                f"{time_trend[0]:.1f} –º–∏–Ω/–¥–µ–Ω—å"
            )
        
        with col2:
            trend_direction = "üìà –†–∞—Å—Ç–µ—Ç" if count_trend[0] > 0 else "üìâ –ü–∞–¥–∞–µ—Ç" if count_trend[0] < 0 else "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ"
            st.metric(
                "–¢—Ä–µ–Ω–¥ –∑–∞–ø–∏—Å–µ–π",
                trend_direction,
                f"{count_trend[0]:.1f} –∑–∞–ø–∏—Å–µ–π/–¥–µ–Ω—å"
            )
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥–Ω—è)")
    
    # –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    st.subheader("üìä –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    daily_category_stats = df.groupby(['date', 'category'])['duration_minutes'].sum().reset_index()
    
    if not daily_category_stats.empty:
        # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        fig_category_trends = px.line(
            daily_category_stats,
            x='date',
            y='duration_minutes',
            color='category',
            title="–¢—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            markers=True,
            color_discrete_map={
                'work': '#FF6B6B',
                'study': '#4ECDC4',
                'rest': '#45B7D1'
            }
        )
        fig_category_trends.update_layout(
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)"
        )
        st.plotly_chart(fig_category_trends, use_container_width=True)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        col1, col2, col3 = st.columns(3)
        
        for i, category in enumerate(['work', 'study', 'rest']):
            with [col1, col2, col3][i]:
                category_data = daily_category_stats[daily_category_stats['category'] == category]
                if len(category_data) > 1:
                    trend = np.polyfit(range(len(category_data)), category_data['duration_minutes'], 1)
                    trend_direction = "üìà" if trend[0] > 0 else "üìâ" if trend[0] < 0 else "‚û°Ô∏è"
                    
                    category_emoji = {'work': 'üíº', 'study': 'üìö', 'rest': 'üò¥'}
                    emoji = category_emoji.get(category, 'üìä')
                    
                    st.metric(
                        f"{emoji} {category.upper()}",
                        trend_direction,
                        f"{trend[0]:.1f} –º–∏–Ω/–¥–µ–Ω—å"
                    )
                else:
                    category_emoji = {'work': 'üíº', 'study': 'üìö', 'rest': 'üò¥'}
                    emoji = category_emoji.get(category, 'üìä')
                    st.metric(f"{emoji} {category.upper()}", "‚û°Ô∏è", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º
    st.subheader("üìÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–µ–ª–∏ –∫ –¥–∞–Ω–Ω—ã–º
    df_with_weeks = df.copy()
    df_with_weeks['week'] = df_with_weeks['entry_date'].dt.isocalendar().week
    df_with_weeks['year'] = df_with_weeks['entry_date'].dt.year
    
    weekly_stats = df_with_weeks.groupby(['year', 'week', 'category'])['duration_minutes'].sum().reset_index()
    
    if not weekly_stats.empty:
        weekly_stats['week_label'] = weekly_stats['year'].astype(str) + '-W' + weekly_stats['week'].astype(str)
        
        fig_weekly = px.line(
            weekly_stats,
            x='week_label',
            y='duration_minutes',
            color='category',
            title="–¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º",
            markers=True,
            color_discrete_map={
                'work': '#FF6B6B',
                'study': '#4ECDC4',
                'rest': '#45B7D1'
            }
        )
        fig_weekly.update_layout(
            xaxis_title="–ù–µ–¥–µ–ª—è",
            yaxis_title="–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)"
        )
        fig_weekly.update_xaxes(tickangle=45)
        st.plotly_chart(fig_weekly, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º")
    
    monthly_stats = df.groupby(['year', 'month', 'category'])['duration_minutes'].sum().reset_index()
    
    if not monthly_stats.empty:
        monthly_stats['month_label'] = monthly_stats['year'].astype(str) + '-' + monthly_stats['month'].astype(str).str.zfill(2)
        
        fig_monthly = px.bar(
            monthly_stats,
            x='month_label',
            y='duration_minutes',
            color='category',
            title="–í—Ä–µ–º—è –ø–æ –º–µ—Å—è—Ü–∞–º",
            barmode='group',
            color_discrete_map={
                'work': '#FF6B6B',
                'study': '#4ECDC4',
                'rest': '#45B7D1'
            }
        )
        fig_monthly.update_layout(
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)"
        )
        fig_monthly.update_xaxes(tickangle=45)
        st.plotly_chart(fig_monthly, use_container_width=True)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
    st.title("üìä –î–∞—à–±–æ—Ä–¥ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            st.cache_data.clear()
            st.session_state.last_entry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    with col3:
        st.markdown(f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫")
    
    st.markdown("---")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã
    st.sidebar.markdown("---")
    st.sidebar.markdown(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        session = get_session()
        entry_count = session.query(TimeEntry).count()
        st.sidebar.markdown(f"üíæ –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {entry_count}")
        close_session(session)
    except Exception as e:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    df = load_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    if 'last_entry_count' not in st.session_state:
        st.session_state.last_entry_count = len(df)
    elif len(df) > st.session_state.last_entry_count:
        new_entries = len(df) - st.session_state.last_entry_count
        st.success(f"üéâ –î–æ–±–∞–≤–ª–µ–Ω–æ {new_entries} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π!")
        st.session_state.last_entry_count = len(df)
    
    if df.empty:
        st.warning("üìù –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.")
        st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –≤ –±–æ—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏.")
        return
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    min_date = df['entry_date'].min().date()
    max_date = df['entry_date'].max().date()
    
    date_range = st.sidebar.date_input(
        "üìÖ –ü–µ—Ä–∏–æ–¥",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    all_categories = sorted(df['category'].unique())
    selected_categories = st.sidebar.multiselect(
        "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
        options=all_categories,
        default=all_categories,
        help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–¥–∞—á–∞–º
    all_activities = sorted(df['activity_name'].unique())
    selected_activities = st.sidebar.multiselect(
        "üìù –ó–∞–¥–∞—á–∏",
        options=all_activities,
        default=all_activities,
        help="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    time_period = st.sidebar.selectbox(
        "üïê –í—Ä–µ–º—è –¥–Ω—è",
        ["–í—Å–µ –≤—Ä–µ–º—è", "–£—Ç—Ä–æ (6-12)", "–î–µ–Ω—å (12-18)", "–í–µ—á–µ—Ä (18-24)", "–ù–æ—á—å (0-6)"]
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if len(date_range) == 2:
        start_date, end_date = date_range
        if start_date and end_date:
            df_filtered = df[
                (df['entry_date'].dt.date >= start_date) &
                (df['entry_date'].dt.date <= end_date) &
                (df['category'].isin(selected_categories)) &
                (df['activity_name'].isin(selected_activities))
            ]
        else:
            df_filtered = df[
                (df['category'].isin(selected_categories)) &
                (df['activity_name'].isin(selected_activities))
            ]
    else:
        df_filtered = df[
            (df['category'].isin(selected_categories)) &
            (df['activity_name'].isin(selected_activities))
        ]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    if time_period == "–£—Ç—Ä–æ (6-12)":
        df_filtered = df_filtered[df_filtered['hour'].between(6, 11)]
    elif time_period == "–î–µ–Ω—å (12-18)":
        df_filtered = df_filtered[df_filtered['hour'].between(12, 17)]
    elif time_period == "–í–µ—á–µ—Ä (18-24)":
        df_filtered = df_filtered[df_filtered['hour'].between(18, 23)]
    elif time_period == "–ù–æ—á—å (0-6)":
        df_filtered = df_filtered[df_filtered['hour'].between(0, 5)]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    if df_filtered.empty:
        st.warning("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        return
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
        "üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        "üç∞ –ü–æ –∑–∞–¥–∞—á–∞–º", 
        "‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏", 
        "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è",
        "üìà –¢—Ä–µ–Ω–¥—ã",
        "üïê –í—Ä–µ–º—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    ])
    
    with tab1:
        show_general_statistics(df_filtered)
    
    with tab2:
        show_category_analysis(df_filtered)
    
    with tab3:
        show_activity_analysis(df_filtered)
    
    with tab4:
        show_time_analysis(df_filtered)
    
    with tab5:
        show_detailed_data(df_filtered)
    
    with tab6:
        show_trends_analysis(df_filtered)
    
    with tab7:
        show_time_by_categories(df_filtered)

if __name__ == "__main__":
    main() 